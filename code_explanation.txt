This document explains the core components and functionality of the `auramixer.py` application.

**1. Initialization and Setup:**
   - `pygame.init()` and `pygame.mixer.init()`: Initializes all the Pygame modules, specifically the mixer for audio playback.
   - `SCREEN_WIDTH`, `SCREEN_HEIGHT`: Defines the dimensions of the application window.
   - `screen = pygame.display.set_mode(...)`: Creates the display surface (the application window).
   - `pygame.display.set_caption("AuraMixer")`: Sets the title of the application window to "AuraMixer".
   - `font = pygame.font.Font(None, 36)`: Initializes a font for displaying text on the screen.

**2. Asset Loading (`get_absolute_path` function and asset sections):**
   - `get_absolute_path(relative_path)`: A utility function to correctly resolve file paths, especially useful when the application is packaged (e.g., with PyInstaller). It checks for `sys._MEIPASS` to handle temporary PyInstaller paths.
   - **Background Images:**
     - The code scans the `backgrounds/` folder for `.png`, `.jpg`, and `.jpeg` files.
     - Each image is loaded, scaled to cover the screen while maintaining its aspect ratio (similar to `background-size: cover` in CSS), and then cropped to fit the screen dimensions.
     - All processed background images are stored in `all_background_images`.
     - `BACKGROUND_CHANGE_EVENT` and `pygame.time.set_timer`: A custom Pygame event is set up to trigger a background image change every 10 seconds.
   - **Scream Sounds:**
     - The code scans the `effects/` folder for `.wav` and `.mp3` files.
     - Loaded scream sounds are stored in `scream_sounds`.
     - `scream_map`: A dictionary is created to map each alphabet key (A-Z) to a specific scream sound. This ensures that pressing 'A' always plays the same scream, 'B' plays another, and so on, based on the order they are loaded.
   - **Music Tracks:**
     - The code scans the `music/` folder for `.wav` and `.mp3` files.
     - File paths are stored in `music_files`.

**3. Sound Playback Functions:**
   - `play_scream(key_code)`:
     - Takes a `key_code` (Pygame's internal representation of a key).
     - If the `key_code` exists in `scream_map` (meaning it's an alphabet key mapped to a scream), it plays the corresponding scream sound.
   - `play_music(track_index)`:
     - Takes an `index` representing the music track to play.
     - Uses two `pygame.mixer.Channel` objects (`channel1`, `channel2`) to enable overlapping fades.
     - If music is currently playing on `current_channel`, it fades out over 2 seconds.
     - The new music track is loaded and played on `fading_channel`, fading in over 2 seconds and looping indefinitely.
     - The `current_channel` and `fading_channel` are then swapped.
   - `stop_all_sounds()`:
     - Fades out both `current_channel` and `fading_channel` over 2 seconds.
     - Stops all sounds on all mixer channels, including any currently playing scream sounds (`pygame.mixer.stop()`).

**4. Main Game Loop (`while running:`):**
   - **Event Handling (`for event in pygame.event.get():`)**:
     - `pygame.QUIT`: Handles closing the application window.
     - `BACKGROUND_CHANGE_EVENT`: When this custom event is triggered (every 10 seconds):
       - It increments `current_bg_index` to select the next background image.
       - Sets `target_display_image` to the new image and resets `fade_alpha` to 0, initiating the fade-in process.
     - `pygame.KEYDOWN`:
       - **Alphabet Keys (A-Z):** If an alphabet key is pressed, `play_scream(event.key)` is called to play the mapped scream sound.
       - **Spacebar:** Calls `stop_all_sounds()`.
       - **Numeric Keys (1-0, Numpad 1-0):** Calls `play_music()` with the appropriate index to play the corresponding music track.
   - **Drawing (`if current_display_image: ...`)**:
     - This section handles rendering the background image and the text overlays.
     - **Background Fading Logic:**
       - If `target_display_image` is set (meaning a fade is in progress) and `fade_alpha` is less than 255:
         - `fade_alpha` is incremented to gradually increase the opacity of the new image.
         - Two temporary surfaces are created: one for the `current_display_image` (fading out) and one for the `target_display_image` (fading in).
         - `set_alpha()` is used on these temporary surfaces to control their transparency during the fade.
         - Both surfaces are blitted (drawn) onto the main `screen` to create the cross-fade effect.
         - Once `fade_alpha` reaches 255, the `current_display_image` is updated to the `target_display_image`, and the fading state is reset.
       - If no fade is in progress, only the `current_display_image` is drawn.
     - **Text Overlays:**
       - `info_text` list is populated with control instructions and music track mappings.
       - Each line of text is rendered using `font.render()` and then blitted onto the screen.
   - `pygame.display.flip()`: Updates the entire screen to show what has been drawn.

**5. Cleanup:**
   - `pygame.quit()`: Uninitializes Pygame modules.
   - `sys.exit()`: Exits the Python script.

This structure provides a robust and interactive soundboard experience with dynamic visual feedback and clear audio controls.